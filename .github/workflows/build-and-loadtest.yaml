name: Build and Deploy Candidate; Run Iter8 Load Test

on:
  push:
    branches: [ main ]

env:
  # IBM_CLOUD_API_KEY: ${{ secrets.IBM_CLOUD_API_KEY }}
  # IBM_CLOUD_RESOURCE_GROUP: 585330279c4b4175890b5c59dab786fb
  # IBM_CLOUD_REGION: us-south
  # # IKS_CLUSTER: kalantar-20211029-1 # name does not work
  # IKS_CLUSTER: c5u1ej8d00c0squuquog # name or id of cluster
  INGRESS_SUBDOMAIN: 'kalantar-20211029-1-f0f5a1e5d9c5f09a7767f1f253010cba-0000.us-south.containers.appdomain.cloud'

  PROD_NAMESPACE: prod-inline
  EXPERIMENT_FOLDER: inline-example

jobs:
  build:
    name: build, deploy and run
    runs-on: ubuntu-latest
    steps:

    # Build new version as docker image and push to registry
    - name: Checkout repository
      uses: actions/checkout@v2

    # Set up docker, determine image tag
    - name: Get owner and repo
      run: |
        ownerrepo=${{ github.repository }}
        owner=$(echo $ownerrepo | cut -f1 -d/)
        if [[ "$owner" == "iter8-tools" ]]; then
          owner=iter8
        fi
        echo "OWNER=$owner" >> $GITHUB_ENV
        echo "REPO=$(echo $ownerrepo | cut -f2 -d/)" >> $GITHUB_ENV

    - run: echo "IMAGE=${{ env.OWNER }}/${{ env.REPO }}:${{ github.event.commits[0].id }}" >> $GITHUB_ENV
    - run: echo "NAMESPACE=inline-test-${{ github.sha }}" >> $GITHUB_ENV

    # Build and push image (to DockerHub)
    - uses: docker/setup-buildx-action@v1
    - uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_SECRET }}
    - name: Build and push image
      uses: docker/build-push-action@v2
      with:
        tags: ${{ env.IMAGE }}
        push: true




    - run: echo "Deploy candidate"

    - uses: kalantar/iks@main
      with:
        IBM_CLOUD_API_KEY: ${{ secrets.IBM_CLOUD_API_KEY }}
        IBM_CLOUD_RESOURCE_GROUP: 585330279c4b4175890b5c59dab786fb
        IBM_CLOUD_REGION: us-south
        # IKS_CLUSTER: kalantar-20211029-1 # name does not work
        IKS_CLUSTER: c5u1ej8d00c0squuquog # name or id of cluster

    # # Setup: Install IBM Cloud CLI
    # - name: Install IBM Cloud CLI
    #   run: | 
    #     # curl -fsSL https://clis.cloud.ibm.com/install/linux | sh
    #     curl -L -o /tmp/IBM_Cloud_CLI.tar.gz https://download.clis.cloud.ibm.com/ibm-cloud-cli/2.4.0/IBM_Cloud_CLI_2.4.0_amd64.tar.gz
    #     cd /tmp
    #     tar -xvf /tmp/IBM_Cloud_CLI.tar.gz
    #     chmod 755 /tmp/Bluemix_CLI/install
    #     /tmp/Bluemix_CLI/install -q
        
    #     ibmcloud --version
    #     ibmcloud config --check-version=false
    #     ibmcloud plugin install -f kubernetes-service
    #     ibmcloud plugin install -f container-registry

    # - name: Authenticate with IBM Cloud CLI
    #   run: |
    #     ibmcloud login --apikey "${IBM_CLOUD_API_KEY}" -r "${IBM_CLOUD_REGION}" -g default
    #     ibmcloud cr region-set "${IBM_CLOUD_REGION}"
    #     ibmcloud cr login
      
    # - name: Identify target cluster
    #   run: |
    #     ibmcloud target -g $IBM_CLOUD_RESOURCE_GROUP
    #     ibmcloud ks cluster config --cluster $IKS_CLUSTER
    #     kubectl config current-context

    - name: Create experiment namespace
      run: |
        kubectl create ns ${{ env.NAMESPACE }} || true

    - name: Deploy app
      run: |
        cd $EXPERIMENT_FOLDER
        sed "s#{{ .image }}#${{ env.IMAGE }}#" go.tpl 
        sed "s#{{ .image }}#${{ env.IMAGE }}#" go.tpl | kubectl -n ${{ env.NAMESPACE }} apply -f -

    - name: Wait for app to Start
      run: kubectl -n ${{ env.NAMESPACE }} wait --for=condition=available --timeout=60s --all deployments 
    - name: Determine port
      run: |
        port=$(kubectl -n ${{ env.NAMESPACE }} get svc myservice -o jsonpath='{.spec.ports[0].nodePort}')
        echo "PORT=$port" >> $GITHUB_ENV

    - run: |
        cat << EOF > experiment-config.yaml
          url: http://${{ env.INGRESS_SUBDOMAIN}}:${{ env.PORT }}
          SLOs:
            http/error-rate: 0
            http/latency-mean: 100
        EOF
        cat experiment-config.yaml
    # - uses: kalantar/iter8-run@main
    # - uses: iter8-tools/iter8@pull/1150/head
    - uses: iter8-tools/iter8-action@main
      with:
        chart: load-test-http
        valuesFile: experiment-config.yaml
        # validateSLOs: false
        # logLevel: trace

    - name: promote
      if: success()
      run: | 
        cd $EXPERIMENT_FOLDER
        sed "s#{{ .image }}#${{ env.IMAGE }}#" go.tpl | kubectl -n $PROD_NAMESPACE apply -f -

    # Cleanup (remove) test namespace
    - name: cleanup - delete testing artifacts
      if: always()
      run: kubectl delete --ignore-not-found namespace ${{ env.NAMESPACE }}


  e2e-load-test-grpc:
    name: local grpc tests
    runs-on: ubuntu-latest
    steps:
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.17

    - name: Install Iter8
      run: |
        wget https://github.com/iter8-tools/iter8/releases/download/v0.9.2/iter8-linux-amd64.tar.gz
        tar -xvf iter8-linux-amd64.tar.gz
        mv linux-amd64/iter8 /usr/local/bin

    # - name: run greeter
    #   run: |
    #     git clone -b v1.43.0 https://github.com/grpc/grpc-go
    #     cd grpc-go/examples/helloworld
    #     go build greeter_server/main.go
    #     ./main &
    #     sleep 5

    - name: run example
      run: |
        docker pull docker.io/grpc/java-example-hostname:latest
        docker run -p 50051:50051 docker.io/grpc/java-example-hostname:latest &
        sleep 5
        
    - name: load test grpc service method 1
      run: |
        set -e
        iter8 launch -l trace -c load-test-grpc --set-string host="127.0.0.1:50051" \
                  --set-string call="helloworld.Greeter.SayHello" \
                  --set-string protoURL="https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto" \
                  --set data.name="frodo" \
                  --set SLOs.grpc/error-rate=0 \
                  --set SLOs.grpc/latency/mean=150 \
                  --set SLOs.grpc/latency/p90=300 \
                  --set SLOs.grpc/latency/p'97\.5'=500
        cat experiment.yaml
        iter8 report
        iter8 assert -c completed -c nofailure -c slos

    - name: load test grpc service method 2
      run: | 
        cat << EOF > experiment-config.yaml
          host: 127.0.0.1:50051
          call: helloworld.Greeter.SayHello
          protoURL: https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto
          data:
            name: frodo
          SLOs:
            grpc/error-rate: 0
            grpc/latency/mean: 150
            grpc/latency/p90: 300
            grpc/latency/p97.5: 500
        EOF
        cat experiment-config.yaml
    - run: |
        set -e
        iter8 launch -l trace -c load-test-grpc -f experiment-config.yaml
        cat experiment.yaml
        iter8 report
        iter8 assert -c completed -c nofailure -c slos

    - name: load test grpc service method 3
      run: | 
        cat << EOF > experiment-config.yaml
          host: host.docker.internal:50051
          call: helloworld.Greeter.SayHello
          protoURL: https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto
          data:
            name: frodo
          SLOs:
            grpc/error-rate: 0
            grpc/latency/mean: 150
            grpc/latency/p90: 300
            grpc/latency/p97.5: 500
        EOF
        cat experiment-config.yaml
    - uses: iter8-tools/iter8-action@pull/4/head
      with:
        chart: load-test-grpc
        valuesFile: experiment-config.yaml
        logLevel: trace
